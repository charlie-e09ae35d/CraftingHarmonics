
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
}

repositories {
    maven { url "http://maven.winterblade.org/content/repositories/minecraft/" }
    maven { url "http://dvs1.progwml6.com/files/maven" } // JEI, TiCon, etc
    maven { url "http://tehnut.info/maven/" } // Blood Magic
    maven { url "http://maven.modmuss50.me/" } // TechReborn, RebornCore
    maven { url 'http://maven.rubbix.net' } // Tesla API
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

apply from: 'config.gradle'

subprojects {
    apply from: rootProject.file('config.gradle')
}

archivesBaseName = "craftingharmonics"

// Java Version
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = project.mappings
    replace '@VERSION@', project.version
}

// Define our integrations
def integrations = [
        'ticon',
        'bloodmagic',
        'techreborn',
        'abyssalcraft',
        'betterquesting',
        'hqm'
]

subprojects.each { subproject -> evaluationDependsOn( subproject.path ) }

dependencies {
    // Our API
    compile project(":api")

    // JEI
    deobfCompile "mezz.jei:jei_1.9.4:3.4.0.202"
    deobfCompile "org.winterblade.minecraft:NashornLib:1.9.4-1.8.77-1.3.0.7"
    // compile files('libs/NashornLib-1.9.0-1.8.77-1.2.0')
}

//Add dependencies to the JAR
jar {
    manifest {
        attributes 'FMLCorePlugin': 'org.winterblade.minecraft.harmony.asm.HarmonyPreloader',
                   'FMLCorePluginContainsFMLMod': 'true'
    }

    dependsOn integrations.collect { ':integration:'+ it + ':jar'}
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    from project(":api").sourceSets.main.output
    for (p in integrations) {
        from project(':integration:' + p).sourceSets.main.output
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task getTCVersionInfo << {
    def branch = System.getProperty("teamcity.build.branch", "")
    def counter = System.getProperty("build.counter", "")
    def hash = System.getProperty("build.vcs.number", "")
    if(!branch.equals("")) branch = branch.equals("<default>") ? branch = "-develop" : "-" + branch
    if(!hash.equals("")) hash = "-" + hash[0..7]
    if(!counter.equals("")) counter = "." + counter

    version = "${version}${counter}${branch}${hash}"
}

//noinspection GroovyAssignabilityCheck
task printTCVersionInfo(dependsOn: 'getTCVersionInfo') << {
    println("##teamcity[setParameter name='ProjectVersion' value='${version}']")
    println("##teamcity[buildNumber '${version}']")
}

task artifactDeobf(type: Copy, dependsOn: ['jar']) {
    outputs.upToDateWhen { false }
    from 'build/libs/'
    into 'build/libs/'
    rename { String fileName ->
        if(!fileName.endsWith('sources.jar')) fileName.replace('.jar','-deobf.jar')
    }
}

task buildArtifacts(dependsOn: ['sourceJar','artifactDeobf','reobfJar'])

uploadArchives {
    if(project.hasProperty("release")) {
        repo = "http://maven.winterblade.org/content/repositories/minecraft/"
    }

    repositories.mavenDeployer {
        dependsOn 'reobfJar'

        if(project.hasProperty('mavenPass')) {
            repository(url: repo) {
                authentication(userName: "minecraft", password: project.getProperty('mavenPass'))
            }
        }

        pom {
            groupId = project.group
            version = "${version}" // So it gets processed after it's set from TC if it's a dev build
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'Crafting Harmonics recipe manager'
                url 'https://github.com/legendblade/CraftingHarmonics'

                scm {
                    url 'https://github.com/legendblade/CraftingHarmonics'
                    connection 'scm:git:git://github.com/legendblade/CraftingHarmonics.git'
                    developerConnection 'scm:git:git@github.com:legendblade/CraftingHarmonics.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/legendblade/CraftingHarmonics/issues'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://raw.githubusercontent.com/legendblade/CraftingHarmonics/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'legendblade'
                        name 'Matt'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}

curseforge {
    apiKey = System.getProperty("CurseForgeKey", "")
    project {
        id = '243728'
        changelog = file('changelog.html')
        changelogType = 'html'
        releaseType = project.hasProperty('releaseType') ? project.releaseType : 'alpha'
        relations {
            requiredLibrary 'nashorn-scripting-library'

            // Mods we have integration with:
            optionalLibrary 'abyssalcraft'
            optionalLibrary 'better-questing'
            optionalLibrary 'blood-magic'
            optionalLibrary 'hardcore-questing-mode'
            optionalLibrary 'just-enough-items-jei'
            optionalLibrary 'techreborn'
            optionalLibrary 'tinkers-construct'
        }
    }
}
