
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.9.0-1.1.3"
group= "org.winterblade.minecraft.craftingharmonics" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "craftingharmonics"

// java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    repo = "http://maven.winterblade.org/content/repositories/CraftingHarmonicsDev"
}

minecraft {
    version = "1.9-12.16.0.1863-1.9"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20160312"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

/// /Add "embedded" configuration
configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    deobfCompile "mezz.jei:jei_1.9:3.2.8.182"

    // Include a proper version of nashorn...
    // TODO: Remove when Curse updates JRE past 8u40
    embed files('libs/nashorn.jar');
}

//Add dependencies to the JAR
jar {
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task getTCVersionInfo << {
    def branch = System.getProperty("teamcity.build.branch", "")
    def counter = System.getProperty("build.counter", "")
    def hash = System.getProperty("build.vcs.number", "")
    if(!branch.equals("")) branch = branch.equals("<default>") ? branch = "-develop" : "-" + branch
    if(!hash.equals("")) hash = "-" + hash[0..7]
    if(!counter.equals("")) counter = "." + counter

    version = "${version}${counter}${branch}${hash}"
}

//noinspection GroovyAssignabilityCheck
task printTCVersionInfo(dependsOn: 'getTCVersionInfo') << {
    println("##teamcity[setParameter name='ProjectVersion' value='${version}']")
    println("##teamcity[buildNumber '${version}']")
}

task artifactDeobf(type: Copy, dependsOn: ['jar']) {
    outputs.upToDateWhen { false }
    from 'build/libs/'
    into 'build/libs/'
    rename { String fileName ->
        if(!fileName.endsWith('sources.jar')) fileName.replace('.jar','-deobf.jar')
    }
}

task buildArtifacts(dependsOn: ['sourceJar','artifactDeobf','reobfJar'])

uploadArchives {
    if(project.hasProperty("release")) {
        repo = "http://maven.winterblade.org/content/repositories/CraftingHarmonics"
    }

    repositories.mavenDeployer {
        dependsOn 'reobfJar'

        if(project.hasProperty('mavenPass')) {
            repository(url: repo) {
                authentication(userName: "minecraft", password: project.getProperty('mavenPass'))
            }
        }

        pom {
            groupId = project.group
            version = "${version}" // So it gets processed after it's set from TC if it's a dev build
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'Crafting Harmonics recipe manager'
                url 'https://github.com/legendblade/CraftingHarmonics'

                scm {
                    url 'https://github.com/legendblade/CraftingHarmonics'
                    connection 'scm:git:git://github.com/legendblade/CraftingHarmonics.git'
                    developerConnection 'scm:git:git@github.com:legendblade/CraftingHarmonics.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/legendblade/CraftingHarmonics/issues'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://raw.githubusercontent.com/legendblade/CraftingHarmonics/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'legendblade'
                        name 'Matt'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}
