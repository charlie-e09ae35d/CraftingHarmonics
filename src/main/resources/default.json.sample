{
    name: "Sample File",
    description: "Sample file for reference.  To use it, remove the '.sample' extension; only .json files are parsed.",
    sets: [
        {
            name: "default",
            operations: [
                {
                    __comment: "You can remove recipes that result in a particular block",
                    __result: "Removes Lapis blocks from being craftable",
                    type: "remove",
                    what: "minecraft:lapis_block"
                },
                {
                    __comment: "You can add shaped recipes",
                    __result: "Turns 3 sticks in a triangle format into black dye",
                    type: "addShaped",
                    output: "minecraft:dye:0",
                    quantity: 1,
                    with: [
                        "", "minecraft:stick","",
                        "minecraft:stick", "", "minecraft:stick"
                    ]
                },
                {
                    __comment: "If you want a tall recipe instead, specify the width or height (or both!)",
                    __result: "Adds in a recipe with five sticks to turn into another dye.",
                    type: "addShaped",
                    output: "minecraft:dye:12",
                    width: 2,
                    height: 3,
                    with: ["minecraft:stick","minecraft:stick","minecraft:stick","minecraft:stick","minecraft:stick"]
                },
                {
                    __comment: "You can also specify the quantity on the end of the output; use * to ignore metadata.",
                    __result: "Adds a recipe turning three sticks into 10 stone.  OP!",
                    type: "addShaped",
                    output: "minecraft:stone:0:10",
                    width: 1,
                    height: 3,
                    with: ["minecraft:stick","minecraft:stick","minecraft:stick"]
                },
                {
                    __comment: "You can also specify ore dictionary entries by surrounding the name with chevrons.",
                    __result: "Adds a lever recipe with two sticks and any log",
                    type: "addShaped",
                    output: "minecraft:lever",
                    width: 1,
                    height: 3,
                    with: ["minecraft:stick","minecraft:stick","<logWood>"],
                    displayName: "Tall Lever"
                },
                {
                    __comment: "You can also add shapeless recipes.",
                    __result: "Turns one black and one red dye into five red dye.",
                    type: "addShapeless",
                    output: "minecraft:dye:1",
                    quantity: 5,
                    with: ["minecraft:dye:0", "minecraft:dye:1"]
                },
                {
                    __comment: "Ore dictionary works here as well.",
                    __result: "Turns three glass panes into a piece of glass.",
                    type: "addShapeless",
                    output: "minecraft:glass",
                    with: ["<paneGlass>","<paneGlass>","<paneGlass>"],
                    displayName: "Recovered Glass"
                },
                {
                    __comment: "Furnace recipes will also be removed with remove; this actually removes 2 separate recipes.",
                    __result: "Removes logs from being smelted into charcoal.",
                    type: "remove",
                    what: "minecraft:coal:1"
                },
                {
                    __comment: "Furnace recipes can be added in with addFurnace.",
                    __result: "Turns a stick into 3 charcoal.",
                    type: "addFurnace",
                    output: "minecraft:coal:1:3",
                    with: "minecraft:stick"
                },
                {
                    __comment: "Normally all removes happen before all adds; you can specify priority to change up this order; higher priorities go later.  The default priority is 0.",
                    __result: "Removes the super OP recipe we just added.",
                    type: "remove",
                    what: "minecraft:coal:1",
                    priority: 10
                },
                {
                    __comment: "Furnace recipes can (and should) set experience with their recipes; this is capped between 0.1 and 1.0.",
                    __result: "Gives XP, turning coal into diamonds.",
                    __bug: "Due to the way Minecraft handles xp from smelting, it will take the experience set for the first item registered; i.e. diamond will always give 1.0, because that's the internal recipe.  You can get around this by unregistering the internal one and re-registering it again, but every one of your outputs must have the same xp value.",
                    type: "addFurnace",
                    output: "minecraft:stick",
                    with: "minecraft:coal:0",
                    experience: 0.2,
                    displayName: "Sticky Coal"
                },
                {
                    __comment: "Furnace fuels can be added as well, though not removed; you can only add new fuels or increase pre-existing fuels at the moment.",
                    __result: "Allows the use of any wool as a fuel for one item",
                    type: "addFurnaceFuel",
                    what: "minecraft:wool:*",
                    burnTime: 200
                },
                {
                    __comment: "Brewing recipes can be added as well; you can either specify the input (ie: water bottles; this cannot be a stackable item) and ingredient (ie nether wart) separately...",
                    __result: "Brews lava buckets, plus netherrack to make obsidian; you won't get the bucket back.",
                    type: "addBrew",
                    output: "minecraft:obsidian",
                    input: "minecraft:lava_bucket",
                    ingredient: "minecraft:netherrack"
                },
                {
                    __comment: "Or together in the 'with' property; input first, then ingredient",
                    __result: "Brews water buckets, plus netherrack to make soul sand; you also won't get the bucket back.",
                    type: "addBrew",
                    output: "minecraft:soul_sand",
                    with: ["minecraft:water_bucket", "minecraft:netherrack"],
                    displayName: "Wet Netherrack"
                },
                {
                    __comment: "You can also add entries to the ore dictionary; for instance, this will allow you to use glass bottles in place of panes (like in the panes to glass recipe above).",
                    __result: "Adds glass bottles to the paneGlass list.",
                    type: "registerOreDictItem",
                    what: "minecraft:glass_bottle",
                    oreDict: "paneGlass"
                },
                {
                    __comment: "For more advanced usage, you can set NBT data on any of the added items (shaped, shapeless, furnace, and brew); use the /ch getHeldNBT command in game to log the NBT of the item in your main hand.",
                    __result: "Creates a spawn egg; can't use an Ender Dragon, so, cat's the next best thing.",
                    __extra: "I spent more time figuring out the tags than I did coding this feature, and more time deciding on the recipe than either one...",
                    __warning: "Make sure you properly escape quotes in the NBT, or parsing the file will fail.  Also... make sure you really know what you're doing here.",
                    type: "addShapeless",
                    output: "minecraft:spawn_egg",
                    with: ["minecraft:fish","minecraft:book","minecraft:iron_helmet"],
                    nbt: "{EntityTag:{id:\"Ozelot\",Invulnerable:1,CustomName:\"Toothless\",Visible:1,CatType:1,ActiveEffects:[{Id:11,Amplifier:5,Duration:10000000}]}}",
                    displayName: "Summon Useless Feline"
                },
                {
                    __comment: "You can also do a match on the inputs, just specify the NBT data as your fifth parameter.  For an exact match, use =",
                    __result: "Takes out a few steps turning pigs into porkchops.",
                    type: "addShaped",
                    output: "minecraft:cooked_porkchop",
                    with: ["minecraft:spawn_egg:0:1:={EntityTag:{id:\"Pig\"}}"]
                },
                {
                    __comment: "It works on shapeless recipes too, and for a fuzzy match, use ~",
                    __result: "Takes out a few steps turning cows into beef as well.",
                    type: "addShapeless",
                    output: "minecraft:cooked_beef",
                    with: ["minecraft:spawn_egg:0:1:~{EntityTag:{id:\"Cow\"}}"]
                },
                {
                    __comment: "You can also set tag compounds as raw JSON now.",
                    __result: "An overused joke.",
                    type: "addShapeless",
                    output: "minecraft:spawn_egg",
                    with: ["minecraft:book"],
                    nbt: {
                        EntityTag: {
                            id: "Cow",
                            CustomName: "There Is No Cow Level",
                            Visible:1
                        }
                    },
                    displayName: "Tome of Town Portal"
                },
                {
                    __comment: "As always, you can do ore dictionary as well.",
                    __result: "Just going with it now...",
                    type: "addShaped",
                    output: "minecraft:end_portal_frame",
                    with: ["minecraft:ender_chest","minecraft:spawn_egg:0:1:~{DisplayName:\"Tome of Town Portal\"}","<logWood>"],
                    displayName: "Oh Whatever",
                    quantity: 12
                }
            ]
        }
    ]
}