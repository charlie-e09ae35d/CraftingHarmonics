{
    name: "Sample File",
    description: "Sample file for reference.  To use it, remove the '.sample' extension; only .json files are parsed.",
    sets: [
        {
            name: "default",
            operations: [
                {
                    __comment: "You can remove recipes that result in a particular block",
                    __result: "Removes Lapis blocks from being craftable",
                    type: "remove",
                    what: "minecraft:lapis_block"
                },
                {
                    __comment: "You can add shaped recipes",
                    __result: "Turns 3 sticks in a triangle format into black dye",
                    type: "addShaped",
                    output: "minecraft:dye:0",
                    quantity: 1,
                    with: [
                        "", "minecraft:stick","",
                        "minecraft:stick", "", "minecraft:stick"
                    ]
                },
                {
                    __comment: "If you want a tall recipe instead, specify the width or height (or both!)",
                    __result: "Adds in a recipe with five sticks to turn into another dye.",
                    type: "addShaped",
                    output: "minecraft:dye:12",
                    width: 2,
                    height: 3,
                    with: ["minecraft:stick","minecraft:stick","minecraft:stick","minecraft:stick","minecraft:stick"]
                },
                {
                    __comment: "You can also specify the quantity on the end of the output; use * to ignore metadata.",
                    __result: "Adds a recipe turning three sticks into 10 stone.  OP!",
                    type: "addShaped",
                    output: "minecraft:stone:0:10",
                    width: 1,
                    height: 3,
                    with: ["minecraft:stick","minecraft:stick","minecraft:stick"]
                },
                {
                    __comment: "You can also specify ore dictionary entries by surrounding the name with chevrons.",
                    __result: "Adds a lever recipe with two sticks and any log",
                    type: "addShaped",
                    output: "minecraft:lever",
                    width: 1,
                    height: 3,
                    with: ["minecraft:stick","minecraft:stick","<logWood>"],
                    displayName: "Tall Lever"
                },
                {
                    __comment: "You can also add shapeless recipes.",
                    __result: "Turns one black and one red dye into five red dye.",
                    type: "addShapeless",
                    output: "minecraft:dye:1",
                    quantity: 5,
                    with: ["minecraft:dye:0", "minecraft:dye:1"]
                },
                {
                    __comment: "Ore dictionary works here as well.",
                    __result: "Turns three glass panes into a piece of glass.",
                    type: "addShapeless",
                    output: "minecraft:glass",
                    with: ["<paneGlass>","<paneGlass>","<paneGlass>"],
                    displayName: "Recovered Glass"
                },
                {
                    __comment: "Furnace recipes will also be removed with remove; this actually removes 2 separate recipes.",
                    __result: "Removes logs from being smelted into charcoal.",
                    type: "remove",
                    what: "minecraft:coal:1"
                },
                {
                    __comment: "Furnace recipes can be added in with addFurnace.",
                    __result: "Turns a stick into 3 charcoal.",
                    type: "addFurnace",
                    output: "minecraft:coal:1:3",
                    with: "minecraft:stick"
                },
                {
                    __comment: "Normally all removes happen before all adds; you can specify priority to change up this order; higher priorities go later.  The default priority is 0.",
                    __result: "Removes the super OP recipe we just added.",
                    type: "remove",
                    what: "minecraft:coal:1",
                    from: ["furnace"],
                    priority: 10
                },
                {
                    __comment: "Furnace recipes can (and should) set experience with their recipes; this is capped between 0.1 and 1.0.",
                    __result: "Gives XP, turning coal into diamonds.",
                    __bug: "Due to the way Minecraft handles xp from smelting, it will take the experience set for the first item registered; i.e. diamond will always give 1.0, because that's the internal recipe.  You can get around this by unregistering the internal one and re-registering it again, but every one of your outputs must have the same xp value.",
                    type: "addFurnace",
                    output: "minecraft:stick",
                    with: "minecraft:coal:0",
                    experience: 0.2,
                    displayName: "Sticky Coal"
                },
                {
                    __comment: "Furnace fuels can be added as well, though not removed; you can only add new fuels or increase pre-existing fuels at the moment.",
                    __result: "Allows the use of any wool as a fuel for one item",
                    type: "addFurnaceFuel",
                    what: "minecraft:wool:*",
                    burnTime: 200
                },
                {
                    __comment: "Brewing recipes can be added as well; you can either specify the input (ie: water bottles; this cannot be a stackable item) and ingredient (ie nether wart) separately...",
                    __result: "Brews lava buckets, plus netherrack to make obsidian; you won't get the bucket back.",
                    type: "addBrew",
                    output: "minecraft:obsidian",
                    input: "minecraft:lava_bucket",
                    ingredient: "minecraft:netherrack"
                },
                {
                    __comment: "Or together in the 'with' property; input first, then ingredient",
                    __result: "Brews water buckets, plus netherrack to make soul sand; you also won't get the bucket back.",
                    type: "addBrew",
                    output: "minecraft:soul_sand",
                    with: ["minecraft:water_bucket", "minecraft:netherrack"],
                    displayName: "Wet Netherrack"
                },
                {
                    __comment: "You can also add entries to the ore dictionary; for instance, this will allow you to use glass bottles in place of panes (like in the panes to glass recipe above).",
                    __result: "Adds glass bottles to the paneGlass list.",
                    type: "registerOreDictItem",
                    what: "minecraft:glass_bottle",
                    oreDict: "paneGlass"
                },
                {
                    __comment: "For more advanced usage, you can set NBT data on any of the added items (shaped, shapeless, furnace, and brew); use the /ch getHeldNBT command in game to log the NBT of the item in your main hand.",
                    __result: "Creates a spawn egg; can't use an Ender Dragon, so, cat's the next best thing.",
                    __extra: "I spent more time figuring out the tags than I did coding this feature, and more time deciding on the recipe than either one...",
                    __warning: "Make sure you properly escape quotes in the NBT, or parsing the file will fail.  Also... make sure you really know what you're doing here.",
                    type: "addShapeless",
                    output: "minecraft:spawn_egg",
                    with: ["minecraft:fish","minecraft:book","minecraft:iron_helmet"],
                    nbt: "{EntityTag:{id:\"Ozelot\",Invulnerable:1,CustomName:\"Toothless\",Visible:1,CatType:1,ActiveEffects:[{Id:11,Amplifier:5,Duration:10000000}]}}",
                    displayName: "Summon Useless Feline"
                },
                {
                    __comment: "You can also do a match on the inputs, just specify the NBT data as your fifth parameter.  For an exact match, use =",
                    __result: "Takes out a few steps turning pigs into porkchops.",
                    type: "addShaped",
                    output: "minecraft:cooked_porkchop",
                    with: ["minecraft:spawn_egg:0:1:={EntityTag:{id:\"Pig\"}}"]
                },
                {
                    __comment: "It works on shapeless recipes too, and for a fuzzy match, use ~",
                    __result: "Takes out a few steps turning cows into beef as well.",
                    type: "addShapeless",
                    output: "minecraft:cooked_beef",
                    with: ["minecraft:spawn_egg:0:1:~{EntityTag:{id:\"Cow\"}}"]
                },
                {
                    __comment: "You can also set tag compounds as raw JSON now.",
                    __result: "An overused joke.",
                    type: "addShapeless",
                    output: "minecraft:spawn_egg",
                    with: ["minecraft:book"],
                    nbt: {
                        EntityTag: {
                            id: "Cow",
                            CustomName: "There Is No Cow Level",
                            Visible:1
                        }
                    },
                    displayName: "Tome of Town Portal"
                },
                {
                    __comment: "You can also use an expanded format for items, allowing you to specify more properties.",
                    __result: "Just going with it now...",
                    type: "addShaped",
                    output: "minecraft:end_portal_frame",
                    with: [
                        {
                            item: "minecraft:ender_chest",
                            returnOnCraft: true
                        },
                        {
                            item: "minecraft:spawn_egg:0:1",
                            nbt: {
                                display: {Name: "Tome of Town Portal"}
                            },
                            fuzzyNbt: true,
                            replaceOnCraft: "minecraft:cooked_beef"
                        },
                        {
                            item: "<logWood>"
                        }],
                    displayName: "Oh Whatever",
                    quantity: 12
                },
                {
                    __comment: "If you'd like to damage an input, that's possible as well; also, you can combine the text inputs with JSON inputs",
                    __result: "Creates sticks when combined with an axe.",
                    type: "addShapeless",
                    output: "minecraft:stick:0:10",
                    with: ["<plankWood>",
                        {
                            item: "minecraft:stone_axe:*",
                            damageOnCraft: 25
                        }
                    ]
                },
                {
                    __comment: "For even more advanced functionality, you can implement a JavaScript function in onCraft to modify your output",
                    __result: "Adds a recipe to turn logs into 6 planks, with an axe, and gives a stick as a byproduct.",
                    type: "addShapeless",
                    output: "minecraft:stick",
                    with: [
                        {
                            item: "<logWood>",
                            onCraft: function(event) {
                                // Note, we're just assuming that the metadata for a log matches the metadata for its plank
                                // This is something of a contrived example. :)
                                // Also note: event will always be 'undefined' if you try to print it; this cost me 1+ hour of time
                                // debugging it before I realized I could still call methods on it...
                                var metadata = event.item.getMetadata();
                                event.item.replaceItem("minecraft:planks:"+metadata+":6");
                            }
                        },
                        {
                            item: "minecraft:stone_axe:*",
                            damageOnCraft: 15
                        }
                    ]
                },
                {
                    __comment: "We also provide a synchronized random; the slightly less contrived example",
                    __result: "Duplicates diamonds, with a nether star that has a chance of breaking.",
                    type: "addShapeless",
                    output: "minecraft:diamond:0:2",
                    with: [
                        "minecraft:diamond",
                        {
                            item: "minecraft:nether_star",
                            onCraft: function(event) {
                                // Make sure you use this one instead of JavaScript's Math.random; its random seed
                                // is synchronized between client and server.  If this wasn't the case, you would get
                                // a different result on the client and the server, and bad things would happen.

                                if(event.random.nextFloat() > 0.1) {
                                    event.item.returnItem();
                                }
                            }
                        }
                    ]
                },
                {
                    __comment: "You can specify that a craft should be removed only when it's a given recipe",
                    __result: "Removes the ability to craft torches with charcoal",
                    __notes: "You must use item strings here; ore dictionary and more advanced matching won't work.",
                    type: "remove",
                    what: "minecraft:torch",
                    with: [ "minecraft:coal:1","",
                            "minecraft:stick"]
                },
                {
                    __comment: "More specification for testing purposes; for this recipe, since it only has 3 inputs, you have to specify at least width or height",
                    __result: "Removes paper from being craftable",
                    type: "remove",
                    what: "minecraft:paper",
                    with: [ "minecraft:reeds","minecraft:reeds","minecraft:reeds" ],
                    width: 3
                },

                // Tinker's Construct
                {
                    __comment: "You can register new smeltery melting recipes",
                    __result: "Adds a recipe to melt down a water bucket into 1000mb of water",
                    type: "addSmelteryMelt",
                    what: "water",
                    amount: 1000,
                    with: "minecraft:water_bucket"
                },
                {
                    __comment: "You can also add alloys to the smeltery",
                    __result: "Adds an 'alloy' of iron and water to make pigiron.",
                    type: "addSmelteryAlloy",
                    what: "pigiron:500",
                    with: ["iron:200","water:300"]
                },
                {
                    __comment: "You can remove alloys...",
                    __result: "Removes the obsidian alloy",
                    type: "removeSmelteryAlloy",
                    what: "obsidian"
                },
                {
                    __comment: "... and be specific about it.",
                    __result: "Removes only the other recipe for pig iron",
                    type: "removeSmelteryAlloy",
                    what: "pigiron",
                    with: ["blood","iron","emerald"]
                },
                {
                    __comment: "You can also remove melting recipes...",
                    __result: "Removes all ways to melt things into iron",
                    __notes: "You can be specific about it too, just supply 'with', like normal; you should probably be more specific unless you really intend to add them back in later",
                    type: "removeSmelteryMelt",
                    what: "iron"
                },
                {
                    __comment: "You can also add fuels from the smeltery",
                    __result: "Adds molten iron as a fuel.",
                    __sideEffect: "Incidentally, removes it from being able to be melted down.",
                    type: "addSmelteryFuel",
                    what: "iron:10", // The fluid and how much of it to consume per use
                    duration: 200 // How many ticks one use of fuel will last
                },
                {
                    __comment: "And remove them...",
                    __result: "Makes it pretty much impossible to do anything",
                    type: "removeSmelteryFuel",
                    what: "lava"
                },
                {
                    __comment: "You can add casting table recipes...",
                    __result: "Pour gold over a stick and get a sword; worst tasting popsicle ever.",
                    type: "addSmelteryTableCast",
                    what: "minecraft:golden_sword",
                    with: "gold:288",
                    cast: "minecraft:stick",
                    consumeCast: true
                },
                {
                    __comment: "And casting basin recipes...",
                    __result: "Pour water out into a basin and get an ice block...",
                    __notes: "That's... that's not how melting things down works...",
                    type: "addSmelteryBasinCast",
                    what: "minecraft:ice",
                    with: "water:1000",
                    // Note, we're leaving out the 'cast' here, and consumeCast defaults to false
                },
                {
                    __comment: "You can also remove both of them...",
                    type: "removeSmelteryBasinCast",
                    what: "minecraft:gold_block"
                    // We could be more specific here, but, we don't need to be
                },
                {
                    __comment: "You can set material stats.",
                    __result: "Makes Cobalt much less effective",
                    type: "setMaterialStats",
                    material: "cobalt",
                    // Note: You can leave any of the these out, and it won't modify that aspect of the tool
                    head: {
                        durability: 25, // The base durability for the tool; Cobalt is 780 normally
                        harvestLevel: 5, // above existing materials; Cobalt is 4 normally
                        attack: 2, // number of half hearts of damage to do; Cobalt is 4.1 normally
                        miningSpeed: 2 // usually between 1 and 10; Cobalt is 12.0 normally
                    },
                    handle: {
                        modifier: 0.5, // between 0 and 1, the amount of durability using it for modifiers grants; Cobalt is 0.9 normally
                        durability: 25 // How much durability to add/take away from the tool; Cobalt is 100 normally
                    },
                    extra: {
                        extraDurability: 0 // Added durability to give the tool when used as a binding/etc; Cobalt is 300 normally
                    }
                },
                {
                    __comment: "You can create new harvest levels",
                    __result: "Creates a new harvest level 'Manyullyn', at level 5",
                    type: "setHarvestLevelName",
                    level: 5,
                    name: "Manyullyn",
                    color: "#912CEE" // Color in RGB hex
                },
                {
                    __comment: "Or change existing levels",
                    __result: "Modifies the Diamond level to be called 'Steel/Diamond'",
                    type: "setHarvestLevelName",
                    level: 2,
                    name: "Steel/Diamond",
                    color: "#ADEAEA" // Color in RGB hex
                },


                // Blood Magic
                {
                    __comment: "You can add Blood Magic altar recipes...",
                    __result: "Turns a cooked chicken into an egg",
                    type: "addBloodAltarRecipe",
                    output: "minecraft:egg",
                    with: ["minecraft:cooked_chicken"],
                    minTier: 1,
                    lpCost: 10, // Your tier 1 orb has this as 200...
                    consumeRate: 1, // ... this as 2 ...
                    drainRate: 1 // .. and this as 1.
                },
                {
                    __comment: "... and remove them",
                    __result: "Removes the dagger of sacrifice",
                    type: "removeBloodAltarRecipe",
                    what: "bloodmagic:ItemDaggerOfSacrifice",
                    with: ["minecraft:iron_sword"]  // Optional, as always
                },
                {
                    __comment: "Same with Hellfire (Tartaric) Forge recipes (these accept Ore Dict though)...",
                    __result: "Makes a nether star out of an end portal frame and some wood",
                    type: "addHellfireForgeRecipe",
                    output: "minecraft:nether_star",
                    with: ["minecraft:end_portal_frame","<logWood>"],
                    minSouls: 300,
                    drain: 200
                },
                {
                    __comment: "... and remove them.",
                    __result: "Makes the Sentient Sword go away.",
                    type: "removeHellfireForgeRecipe",
                    what: "bloodmagic:ItemSentientSword"
                    // Could specify with: [], but too lazy. :)
                },
                {
                    __comment: "Also, add alchemy array recipes",
                    __result: "Makes a cooked chicken from an egg and a stick",
                    type: "addAlchemyArray",
                    output: "minecraft:cooked_chicken",
                    with: "minecraft:egg", // This can be an oreDict as well
                    catalyst: "minecraft:stick",
                    circle: "minecraft:textures/items/feather.png", // This is a resource location, leave out for the default circle
                    isBinding: false, // Adds 100% more lightning if true
                    time: 100 // Time in ticks; ignored with isBinding: true
                },
                {
                    __comment: "You can remove them as well, but only with the input/catalyst combo used to register them.",
                    __result: "Removes the bound shovel",
                    type: "removeAlchemyArray",
                    with: "bloodmagic:ItemComponent:8", // Binding component
                    catalyst: "minecraft:diamond_shovel"
                },

                // Harvest levels
                {
                    __comment: "You can remap harvest levels, in case you want to add additional levels between the existing ones.",
                    __result: "Makes it so that blocks which normally require only a stone pick now require a diamond pick",
                    type: "remapHarvestLevel",
                    from: 1,
                    to: 3,
                    with: "pickaxe" // valid options: pickaxe, axe, shovel
                },
                {
                    __comment: "You can, of course, set the harvest level on a single block as well.",
                    __result: "Makes it to where iron ore can now be broken with a stone shovel (as well as a stone pick)",
                    type: "setHarvestLevel",
                    what: "minecraft:iron_ore",
                    to: 1,
                    with: "shovel"
                    // Some additional notes:
                    // - Pickaxes are still effective for everything.  Blame Minecraft.
                    // - Harvest levels can't be removed, but you can set them to really high numbers, like 9001
                    //   (or anything up to Integer.MAX_VALUE: 2147483647)
                    // - Obsidian and redstone are special cases; just don't bother.
                },
                {
                    __comment: "Finally, you can set the effective harvest level of a given tool; note that this still has to be a tool of some form.",
                    __result: "Makes wood shovels also count as a diamond pickaxe.",
                    type: "setToolHarvestLevel",
                    what: "minecraft:wooden_shovel",
                    to: 3,
                    as: "pickaxe"
                    // Note: this will not work with TiCon tools, as they're handled a bit differently; see the Tinker's entry for setMaterialStats instead.
                },


                // Mob drops
                {
                    __comment: "You can set custom mob drop tables",
                    __result: "Replaces the drops from a cow (and a squid)",
                    type: "setMobDrops",
                    what: ["Cow", "net.minecraft.entity.passive.EntitySquid"],
                        // 'what' can be either the entity's simple name ('Cow', 'Squid'), or the full class name ('net.minecraft.entity.passive.EntitySquid')
                        // You can also leave 'what' as an empty array to affect all mobs, but you probably don't want to use replace: true at that point.
                        // Note: Named mobs (like the 'There is no Cow Level' from above) won't match 'Cow', but will match 'net.minecraft.entity.passive.EntityCow'
                    replace: true, // False will simply add items
                    drops: [ // Items to add / replace on the drop table
                        {
                            what: "minecraft:cooked_beef", // Drop cooked steak
                            chance: 0.75, // 75% chance to get the drop
                            min: 1, // Which will create at least 1 of them
                            max: 4, // And at most 4 of them...
                            lootingMultiplier: 1.5, // But taking looting into account (grants an additional 1.5  per level of looting)
                            damageType: "player" // only when being killed by the player; this can be left out, or set to other damage sources
                        },

                        // Below, a 100% chance to get 1 leather, but only when killed with shears.
                        // Note: this does -not- force damageType: 'player'.
                        // Also note: It's really annoying to kill a cow with shears.  Just saying.
                        // This also damages the shears by 1 per drop.
                        {
                            what: "minecraft:leather",
                            min: 1,
                            max: 1,
                            chance: 1.0,
                            killedWith: "minecraft:shears",
                            consume: false, // consume and damagePer are optional
                            damagePer: 1.0  // But consume must be specified and be false if using damagePer.
                        },

                        // You can also set minimum and maximum looting levels:
                        {
                            what: "minecraft:redstone",
                            min: 3,
                            max: 10,
                            minLooting: 1,
                            maxLooting: 2
                        },

                        // Check if the attacker is wielding an offhand:
                        {
                            // Don't ask why damaging a shield gets wheat; I'm just coming up with random examples at this point...
                            what: "minecraft:wheat",
                            min: 1,
                            max: 10,
                            attackerHasOffhand: "minecraft:shield",
                            consumeOffhand: false, // This can be set to true to use the same number of the offhand item as items are dropped
                            damageOffhandPer: 2.0
                                // Damage the offhand by this amount per drop generated.  You must specify consumeOffhand: false if you want this
                                // to work.  If the number of drops generated is more than the item could be damaged by, the number of drops
                                // will be reduced to the proper amount.  Fractional amounts of remaining damage will not yield a drop.
                        },

                        // Now, specifically for players, we can also check to see if they have an item in their inventory:
                        {
                            // Yes, this could be applied to a ghast instead of a cow, but I'm not going flying around fighting ghasts for testing...
                            what: "minecraft:ghast_tear",
                            min: 2,
                            max: 4, // This will check across item stacks and decrement each accordingly.
                            playerHasInventory: "minecraft:glass_bottle",
                            consumeInventory: true,
                            damageInventoryPer: 0.0 // This is ignored since consumeInventory is true, but, here for reference.
                        }
                    ],
                    exclude: [ // Items to exclude from being replaced
                        "bloodmagic:ItemMonsterSoul" // Still allows you to get Demonic Wills from Blood Magic
                    ]
                },
                {
                    __comment: "You can also use this to specify that a particular drop should be removed from everything.",
                    __result: "Makes sure you can't get rotten flesh from any mob",
                    type: "setMobDrops",
                    what: [],
                    replace: false,
                        // Note: 'replace' is false by default, but, note that you want to ensure this is false if you're doing this.
                        // Specifying replace: true, and not providing drops: [] is basically saying "everything should drop nothing."
                    includePlayerDrops: true,
                        // This also defaults to false; if we mark this true, even players won't drop any rotten flesh they're carrying
                        // Note: depending on if a graves mod is installed, this may override this functionality.
                    remove: [ "minecraft:rotten_flesh" ]
                },
                {
                    __comment: "You can specify that a mob has to be under a specific potion effect to do give a certain drop...",
                    __result: "Makes cows drop rotten flesh when under the poison effect.",
                    // Note that this is applied after the operation that removes rotten flesh drops!
                    type: "setMobDrops",
                    what: ["Cow"],
                    drops: [
                        {
                            what: "minecraft:rotten_flesh",
                            min: 1,
                            max: 1,
                            mobHasPotionEffect: "minecraft:poison"
                        }
                    ]
                },
                {
                    __comment: "You can also specify that the player (or other entity doing the killing) has to be under a specific effect.",
                    __result: "Makes mobs drop diamonds if the attacker has the luck effect.",
                    type: "setMobDrops",
                    what: [],
                    drops: [
                        {
                            what: "minecraft:diamond",
                            min: 1,
                            max: 1,
                            attackerHasPotionEffect: "minecraft:luck"
                        }
                    ]
                },

                // JEI Integration
                {
                    __comment: "You can add items to the JEI blacklist to hide them from JEI",
                    __result: "Hides gold blocks from JEI",
                    type: "hide", // There's also a 'show' command'
                    what: "minecraft:gold_block"
                    // Both this, and the 'show' can be added to custom sets, so you can gradually show new items as the game goes on.
                    // Keep in mind, though, that recipes that still make the item or use the item can be used to get to it.
                },

                // TechReborn
                {
                    __comment: "You can add alloy smelter recipes",
                    __result: "Makes an alloy out of wheat and steak to yield bread.",
                    type: "TechReborn.addAlloySmelter",
                    what: ["minecraft:bread:0:2"], // Most TechReborn machines can have input and output quantities; also note, all of the outputs are arrays, not single outputs
                    with: ["minecraft:wheat:0:3", "minecraft:cooked_beef"],
                    ticks: 80, // 4 seconds
                    euPerTick: 4 // 80 * 4 = 360 EU
                },
                {
                    __comment: "Assembling machine recipes",
                    __result: "Makes redstone and a stick into 4 redstone torches.",
                    type: "TechReborn.addAssemblingMachine",
                    what: ["minecraft:redstone_torch:0:4"],
                    with: ["minecraft:redstone:0:2", "minecraft:stick:0:4"], // Some machines can take fewer than their max inputs; for instance, this one can take 1 or 2 inputs.
                    ticks: 20,
                    euPerTick: 30
                },
                {
                    __comment: "Blast furnace recipes",
                    __result: "Steak. Steak never changes.",
                    type: "TechReborn.addBlastFurnace",
                    // Can have 1-2 outputs and 1-2 inputs
                    what: ["minecraft:cooked_beef:0:1","minecraft:bread:0:1"],
                    with: ["minecraft:beef:0:1", "minecraft:wheat:0:1"],
                    ticks: 2000,  // Blast furnace recipes are generally very long
                    euPerTick: 120, // And expensive
                    neededHeat: 1500 // And require a lot of heat
                },
                {
                    __comment: "Centrifuge recipes",
                    __result: "Turns logs into a variety of things.",
                    type: "TechReborn.addCentrifuge",
                    // 1-4 outputs, 1-2 inputs; second input is generally a cell if provided.
                    what: ["minecraft:paper:0:1","minecraft:coal:1:1","minecraft:coal_block:1:2"],
                    with: ["minecraft:log:0:30"],
                    ticks: 200,
                    euPerTick: 30,
                    useOreDict: true // Figures out the proper ore dictionaries to use.
                },
                {
                    __comment: "Chemical reactor recipes",
                    __result: "Turns a glass bottle and redstone into a ghast tear.",
                    type: "TechReborn.addChemicalReactor",
                    // 1 output, 1-2 inputs.
                    what: ["minecraft:ghast_tear:0:1"],
                    with: ["minecraft:redstone:0:3", "minecraft:glass_bottle:0:1"], // This does oredict, apparently.
                    ticks: 200,
                    euPerTick: 30,
                },
                {
                    __comment: "Compressor recipes",
                    __result: "Turns 32 redstone into a redstone ore.",
                    type: "TechReborn.addCompressor",
                    // 1 output, 1 input.
                    what: ["minecraft:redstone_ore:0:1"],
                    with: ["minecraft:redstone:0:32"],
                    ticks: 200,
                    euPerTick: 30,
                },
                {
                    __comment: "Extractor recipes.  Really, really running out of ideas now",
                    __result: "Extracts rotten flesh into leather.",
                    type: "TechReborn.addExtractor",
                    // 1 output, 1 input.
                    what: ["minecraft:leather:0:1"],
                    with: ["minecraft:rotten_flesh:0:2"],
                    ticks: 200,
                    euPerTick: 30,
                },
                {
                    __comment: "Grinder recipes.  Not the same as the Industrial Grinder, more of a macerator",
                    __result: "Grinds nether brick into blaze powder.",
                    type: "TechReborn.addGrinder",
                    // 1 output, 1 input.
                    what: ["minecraft:blaze_powder:0:1"],
                    with: ["minecraft:netherbrick:0:1"],
                    ticks: 200,
                    euPerTick: 30,
                },
                {
                    __comment: "Implosion compressor recipes",
                    __result: "Implodes diamonds into a nether star.",
                    type: "TechReborn.addImplosionCompressor",
                    // 1-2 outputs, 2 inputs.
                    what: ["minecraft:nether_star:0:1"],
                    with: ["minecraft:diamond:0:8","minecraft:tnt:0:24"], // Will also be ore dictionary'ed
                    ticks: 20, // Generally 20
                    euPerTick: 30,
                },
                {
                    __comment: "Industrial electrolyzer recipes",
                    __result: "Electrolyzes... something into something else? :)",
                    type: "TechReborn.addIndustrialElectrolyzer",
                    // 1-4 outputs, 1-2 inputs; second input is generally a cell.
                    what: ["minecraft:golden_apple:0:1", "minecraft:golden_sword:0:1"],
                    with: ["minecraft:gold_block"], // This is going to use the ore dictionary, so, this will also accept iron blocks.
                    ticks: 120,
                    euPerTick: 100,
                },
                {
                    __comment: "Industrial grinder recipes",
                    __result: "Grinds down that gold block into gold nuggets, and bars",
                    type: "TechReborn.addIndustrialGrinder",
                    // 1-4 outputs, 1-2 inputs; second input is generally a fluid container (the empty container of which is generally an output).
                    // Also can accept a fluid (but isn't required) - however, if it's not provided, you will generally provide a fluid container as an input
                    what: ["minecraft:gold_nugget:0:1", "minecraft:gold_ingot:0:1"],
                    with: ["minecraft:gold_block"], // This is going to use the ore dictionary, so, this will also accept iron blocks.
                    fluid: "water:1000",
                    ticks: 100,
                    euPerTick: 120,
                },
                {
                    __comment: "Industrial sawmill recipes",
                    __result: "Throws reeds into the sawmill to produce paper",
                    type: "TechReborn.addSawmill",
                    // 1-3 outputs, 1-2 inputs; second input is generally a fluid container (the empty container of which is generally an output).
                    // Also can accept a fluid (but isn't required) - however, if it's not provided, you will generally provide a fluid container as an input
                    what: ["minecraft:paper:0:1"],
                    with: ["minecraft:reeds:0:1"],
                    fluid: "water:1000",
                    useOreDict: false, // This one we can set if it uses the ore dictionary.
                    ticks: 200,
                    euPerTick: 30,
                },
                {
                    // I couldn't find this machine in the list of blocks, so, it may not be implemented?
                    __comment: "Plate cutting machine recipes",
                    __result: "Makes redstone ore into redstone.",
                    type: "TechReborn.addPlateCutter",
                    what: ["minecraft:redstone:0:20"],
                    with: ["minecraft:redstone_ore"],
                    ticks: 20,
                    euPerTick: 30
                },
                {
                    __comment: "...and finally, Vacuum freezer recipes",
                    __result: "Turns snow into ice.",
                    type: "TechReborn.addVacuumFreezer",
                    // 1 output, 1 input.
                    what: ["minecraft:ice:0:1"],
                    with: ["minecraft:snow:0:1"],
                    ticks: 40,
                    euPerTick: 128,
                },
                {
                    __comment: "You can also remove recipes from the various machines.",
                    __result: "Removes the recipe for turning iron ingots into iron plates in the Compressor",
                    type: "TechReborn.removeRecipe",
                    what: ["techreborn:plates:8"], // This must exactly match your full list of outputs.
                    machine: "Compressor"
                        // Valid values: Centrifuge, Industrial Electrolyzer, Recycler, Alloy Smelter,
                        // Scrapbox, Vacuum Freezer, IndustrialGrinder, Compressor, Chemical Reactor,
                        // Blast Furnace, Plate Cutting Machine, Industrial Sawmill, Extractor,
                        // Implosion Compressor, Grinder
                        // The machine is optional, but it makes it faster to check the recipe list if you use it.
                },
                {
                    __comment: "You can define fusion reactions as well",
                    __result: "Turns a nether star on top, and a ghast tear on bottom, into a diamond, producing a lot of EU per tick.",
                    type: "TechReborn.addFusionReaction",
                    top: "minecraft:nether_star",
                    bottom: "minecraft:ghast_tear",
                    product: "minecraft:diamond",
                    euToStart: 40000000, // 40,000,000 - 80,000,000 are general values used
                    euPerTick: 32768, // This can also be negative to require power to maintain the reaction.
                    ticks: 2048 // The ticks it will take to burn through the fuel.
                },
                {
                    __comment: "And remove them...",
                    __result: "Removes Helium3",
                    type: "TechReborn.removeFusionReaction",
                    what: "techreborn:cell:10"
                },
                {
                    __comment: "You can also add shaped rolling machine recipes.",
                    __result: "Adds a recipe turning three sticks into 10 stone, less OP since this requires power.",
                    type: "TechReborn.addShapedRollingMachine",
                    output: "minecraft:stone:0:10",
                    with: ["minecraft:stick","","","minecraft:stick","","","minecraft:stick","",""]
                },
                {
                    __comment: "As well as shapeless rolling machine recipes.",
                    __result: "Turns three glass panes into a piece of glass.",
                    type: "TechReborn.addShapelessRollingMachine",
                    output: "minecraft:glass",
                    with: ["<paneGlass>","<paneGlass>","<paneGlass>"],
                    displayName: "Recovered Glass"
                },
                {
                    __comment: "You can also remove  recipes from the rolling machine.",
                    __result: "Removes the Cupronickel Heating Coil recipe",
                    type: "TechReborn.removeRollingMachine",
                    what: "techreborn:part:13"
                },
            ]
        },
        {
            name: "peaceful",
            // valid difficulty options: peaceful, easy, normal, hard
            // Note: this is a little awkward if you change difficulties on a server while a player is crafting something
            // The player will still be able to craft the recipe once, but some of the counts will be updated oddly.
            operations: [
                {
                    __comment: "You can also set recipes per difficulty level.",
                    __result: "Adds a recipe for making nether stars in peaceful",
                    type: "addShapeless",
                    output: "minecraft:nether_star",
                    with: [
                        "minecraft:diamond_sword",
                        "minecraft:soul_sand",
                        "minecraft:soul_sand",
                        "minecraft:soul_sand",
                        "minecraft:soul_sand"
                    ]
                }
            ]
        },
        {
            // This can be named whatever you want, as long as it isn't 'default', or one of the difficulty based set names
            name: "custom",
            operations: [
                {
                    __comment: "You can also create custom sets and apply/remove them using the /ch applySet and /ch removeSet commands.",
                    __result: "Adds a recipe for testing",
                    type: "addShapeless",
                    output: "minecraft:golden_apple",
                    with: [
                        "minecraft:apple",
                        "<nuggetGold>"
                    ]
                }
            ]
        }
    ]
}